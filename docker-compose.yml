version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
    mysql:
      driver: ${VOLUMES_DRIVER}
#   redis:
#     driver: ${VOLUMES_DRIVER}

services:

### PHP-FPM ##############################################
    php-fpm:
      build:
        context: ./php-fpm
        args:
          - PHP_VERSION=${PHP_VERSION}
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_SEASLOG=${PHP_FPM_INSTALL_SEASLOG}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PDO_MYSQL=${PHP_FPM_INSTALL_PDO_MYSQL}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${PHP_SEASLOG_LOG_PATH}:/var/log/www
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      restart: unless-stopped
      tty: true
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - backend

### NGINX Server #########################################
    nginx:
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      restart: unless-stopped      
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

#### python ##############################################
    python:
      build:
        context: ./python
        args:
          - PYTHON_VERSION=${PYTHON_VERSION}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${UWSGI_LOG_PATH}:/var/log/uwsgi
      expose:
        - "9090"
      restart: unless-stopped 
      environment:
        - UWSGI_INI_PATH=${UWSGI_INI_PATH}
      command: /bin/sh /root/start.sh
      networks: 
        - backend

#### node ##############################################
    node:
      build:
        context: ./node
        args:
          - NODE_VERSION=${NODE_VERSION}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      restart: unless-stopped
      command: tail -f /dev/null
      #restart: unless-stopped 

# ### MongoDB ##############################################
#     mongo:
#       build: ./mongo
#       ports:
#         - "${MONGODB_PORT}:27017"
#       volumes:
#         - ${DATA_PATH_HOST}/mongo:/data/db
#       networks:
#         - backend

### Redis ################################################
    # redis:
    #   build: ./redis
    #   volumes:
    #     - ${DATA_PATH_HOST}/redis:/data
    #   ports:
    #     - "${REDIS_PORT}:6379"
    #   networks:
    #     - backend

### Jenkins ###################################################
    jenkins:
      image: jenkins:alpine
      environment:
        JAVA_OPTS: "-Djava.awt.headless=true"
      ports:
        - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
        - "${JENKINS_HOST_HTTP_PORT}:8080"
      privileged: true
      volumes:
        - ${JENKINS_HOME}:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock
      restart: unless-stopped
      networks:
        - frontend
        - backend

### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend